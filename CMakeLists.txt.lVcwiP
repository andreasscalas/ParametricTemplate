cmake_minimum_required(VERSION 2.8.8)

set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -fopenmp -O1 -j32 -Wno-implicit -Wno-error")

project(andreaslib)

find_package(Qt5 COMPONENTS Core Widgets REQUIRED QUIET)
include(ExternalProject)

find_package(VTK COMPONENTS
    vtkCommonCore
    vtkFiltersCore
    vtkInfovisCore
    vtkInteractionStyle
    vtkViewsQt
    vtkGUISupportQt
    vtkIOLegacy
)

find_library(MATHGEO_LIB REQUIRED NAMES MATHGEOLIB MathGeoLib mathgeolib MATHGEO MathGeo mathGeo mathgeo )
find_path(MATHGEOLIB_H MathGeoLib)
find_package(RapidJSON REQUIRED)
find_path(EIGEN_H /usr/)
find_path(RAPIDJSON_H /usr/)
find_library(TINYXML2_LIB NAMES tinyXML2 tinyxml2 TINYXML2 tinyXML_2 tinyxml_2 TINYXML_2)
find_path(TINYXML2_H /usr/)
find_path(ORTOOLS ortools)
find_library(ORTOOLS_LIB NAMES or-tools ortools Ortools Or-tools OR-TOOLS ORTOOLS)
find_path(ORTOOLS_H ortools)


if(NOT MATHGEOLIB_H)
    message("MathGeoLib not found. Starting library download and installation, it may take some minutes.")
    set(MATHGEO_LIB mathgeolib_project)
    ExternalProject_Add(
        mathgeolib_project
        GIT_REPOSITORY https://github.com/juj/MathGeoLib.git
        GIT_TAG v1.5
        PREFIX ${PROJECT_SOURCE_DIR}/external/${MATHGEO_LIB}
        CONFIGURE_COMMAND cmake ${PROJECT_SOURCE_DIR}/external/${MATHGEO_LIB}/src/mathgeolib_project/
        BUILD_COMMAND cmake --build .
        INSTALL_COMMAND cmake --install . --prefix ${PROJECT_SOURCE_DIR}
        UPDATE_COMMAND ""
    )
    add_library(mathgeolib STATIC IMPORTED)
    set_property(TARGET mathgeolib PROPERTY IMPORTED_LOCATION ${PROJECT_SOURCE_DIR}/external/${MATHGEO_LIB}/lib/libmathgeolib.a)
    add_dependencies(mathgeolib mathgeolib_project)
endif()

if(NOT RAPIDJSON_H)
    message("RapidJSON not found. Starting library download and installation, it may take some minutes.")
    set(RapidJSON rapidjson_project)
    ExternalProject_Add(
        rapidjson_project
        GIT_REPOSITORY https://github.com/Tencent/rapidjson.git
        GIT_TAG v1.0.0
        PREFIX ${PROJECT_SOURCE_DIR}/external/${RapidJSON}
        CONFIGURE_COMMAND cmake ${PROJECT_SOURCE_DIR}/external/${RapidJSON}/src/rapidjson_project/
        BUILD_COMMAND cmake --build .
        INSTALL_COMMAND cmake --install . --prefix ${PROJECT_SOURCE_DIR}
        UPDATE_COMMAND ""
    )
    add_library(rapidjsonlib STATIC IMPORTED librapidjson.a)
    set_property(TARGET rapidjsonlib PROPERTY IMPORTED_LOCATION ${PROJECT_SOURCE_DIR}/external/${RapidJSON}/lib/librapidjson.a)
    add_dependencies(rapidjsonlib rapidjson_project)
endif()


if(NOT EIGEN_H)
    message("Eigen not found. Starting library download and installation, it may take some time.")
    set(Eigen eigen_project)
    ExternalProject_Add(
        eigen_project
        GIT_REPOSITORY https://gitlab.com/libeigen/eigen.git
        GIT_TAG 3.4-rc1
        PREFIX ${PROJECT_SOURCE_DIR}/external/${Eigen}
        CONFIGURE_COMMAND cmake ${PROJECT_SOURCE_DIR}/external/${Eigen}/src/eigen_project/
        BUILD_COMMAND cmake --build .
        INSTALL_COMMAND cmake --install . --prefix ${PROJECT_SOURCE_DIR}
        UPDATE_COMMAND ""
    )
    add_library(eigenlib STATIC IMPORTED libeigen.a)
    set_property(TARGET eigenlib PROPERTY IMPORTED_LOCATION ${PROJECT_SOURCE_DIR}/external/${Eigen}/lib/libeigen.a)
    add_dependencies(eigenlib eigen_project)
endif()

if(NOT TINYXML2_H)
    message("TinyXML2 not found. Starting library download and installation, it may take some time.")
    set(TINYXML2 tinyxml2_project)
    ExternalProject_Add(
        tinyxml2_project
        GIT_REPOSITORY https://github.com/leethomason/tinyxml2.git
        GIT_TAG 9.0.0
        PREFIX ${PROJECT_SOURCE_DIR}/external/${TINYXML2}
        CONFIGURE_COMMAND cmake ${PROJECT_SOURCE_DIR}/external/${TINYXML2}/src/tinyxml2_project/
        BUILD_COMMAND cmake --build .
        INSTALL_COMMAND cmake --install . --prefix ${PROJECT_SOURCE_DIR}
        UPDATE_COMMAND ""
    )
    add_library(tinyxml2lib STATIC IMPORTED libtinyxml2.a)
    set_property(TARGET tinyxml2lib PROPERTY IMPORTED_LOCATION ${PROJECT_SOURCE_DIR}/external/${TINYXML2}/lib/libtinyxml2.a)
    add_dependencies(tinyxml2lib tinyxml2_project)
endif()

if(NOT ORTOOLS_H)
    message("ORTools not found. Starting library download and installation, it may take some time.")
    set(ORTOOLS ortools_project)
    ExternalProject_Add(
        ortools_project
        GIT_REPOSITORY https://github.com/google/or-tools.git
        GIT_TAG v9.0
        PREFIX ${PROJECT_SOURCE_DIR}/external/${ORTOOLS}
        CONFIGURE_COMMAND cmake ${PROJECT_SOURCE_DIR}/external/${ORTOOLS}/src/ortools_project/
        BUILD_COMMAND cmake --build .
        INSTALL_COMMAND cmake --install . --prefix ${PROJECT_SOURCE_DIR}
        UPDATE_COMMAND ""
    )
    add_library(ortoolslib STATIC IMPORTED libortools.a)
    set_property(TARGET ortoolslib PROPERTY IMPORTED_LOCATION ${PROJECT_SOURCE_DIR}/external/${ORTOOLS}/lib/libortools.a)
    add_dependencies(ortoolslib  ortools_project)
endif()


if(NOT VTK_FOUND)
    message("VTK not found. Starting library download and installation, it may take some time (even ours).")
    set(VTK vtk_project)
    set(CMAKE_VERBOSE_MAKEFILE ON)
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -fopenmp -O1 -j32")
    ExternalProject_Add(
        vtk_project
        GIT_REPOSITORY https://github.com/Kitware/VTK.git
        GIT_TAG v8.1.0.rc2-340-g276b261ba2
        PREFIX ${PROJECT_SOURCE_DIR}/external/${VTK}
        CONFIGURE_COMMAND cmake ${PROJECT_SOURCE_DIR}/external/${VTK}/src/vtk_project/ -DVTK_Group_Qt=ON -DQt5_DIR=${Qt5_DIR}
        BUILD_COMMAND cmake --build .
        INSTALL_COMMAND cmake --install . --prefix ${PROJECT_SOURCE_DIR}
        UPDATE_COMMAND ""
    )
    add_library(vtk STATIC IMPORTED)
    set_property(TARGET vtk PROPERTY IMPORTED_LOCATION ${PROJECT_SOURCE_DIR}/external/${VTK}/lib/libvtk.a)
    add_dependencies(vtk vtk_project)
endif()

#include(${VTK_USE_FILE})
#set( MAINFOLDER ${CMAKE_SOURCE_DIR} )
#SET( CONSTRAINTS ${MAINFOLDER}/Constraints )
#set( ANNOTATION ${MAINFOLDER}/Annotation )
#set( ANNOTATION_H ${MAINFOLDER}/Annotation/include/ )
#set( DEFORMATION ${MAINFOLDER}/Deformation )
#set( DEFORMATION_H ${MAINFOLDER}/Deformation/include )
#set( IMATISTLEX ${MAINFOLDER}/ImatiSTLExtension )
#set( IMATISTLEX_H ${MAINFOLDER}/ImatiSTLExtension/include )
#set( IMATISTL_H ${MAINFOLDER}/ImatiSTLExtension/ImatiSTL/include/ )
#set( NANOFLANN ${MAINFOLDER}/nanoflann/)
#set( TRIANGLE ${MAINFOLDER}/triangle/ )

#set( DATA_STRUCTURES ${MAINFOLDER}/DataStructures )
#set( DATA_STRUCTURES_H ${MAINFOLDER}/DataStructures/include )

#add_definitions(-DTRIANGLE_HEADER="${TRIANGLE}/triangle.h")

#set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -fopenmp -O1")
#add_subdirectory(${IMATISTLEX})
#add_subdirectory(${ANNOTATION})
#add_subdirectory(${DEFORMATION})
#add_subdirectory(${TRIANGLE})
#add_subdirectory(${DATA_STRUCTURES})


##set( NONRIGID_REGISTRATION ${MAINFOLDER}/NonRigidRegistration/ )
##add_subdirectory(${NONRIGID_REGISTRATION})


## Set your files and resources here
#file(GLOB Srcs "${MAINFOLDER}/src/*.c*" "${MAINFOLDER}/src/Styles/*.c*")
#file(GLOB Hdrs "${MAINFOLDER}/include/*.h" "${MAINFOLDER}/include/Styles/*.h")
#file(GLOB UIs "${MAINFOLDER}/gui/*.ui")

#set( Docs ${CMAKE_CURRENT_SOURCE_DIR}/../docs/Doxyfile.in)

#set( QRCs ${CMAKE_SOURCE_DIR}/Icons/icons.qrc )


## Instruct CMake to run moc automatically when needed.
#set(CMAKE_AUTOMOC ON)
#qt5_wrap_ui(UI_Srcs ${UIs})
#qt5_add_resources(QRC_Srcs ${QRCs} )

#source_group("Resources" FILES
#${UIs}
#${QRCs}
#${EXE_ICON} # Not present
#)

#source_group("Generated" FILES
#${UI_Srcs}
#${MOC_Srcs}
#${QRC_Srcs}
#)

## CMAKE_AUTOMOC in ON so the MocHdrs will be automatically wrapped.

#add_executable(${PROJECT_NAME} ${Srcs} ${Hdrs} ${UI_Srcs} ${MOC_Hdrs} ${QRC_Srcs} )
#qt5_use_modules(${PROJECT_NAME} Core Gui Widgets)
#target_link_libraries(${PROJECT_NAME} #ConstraintsLib-lib
#    Annotation-lib
#    ImatiSTLExtension-lib
#    Deformation-lib
#    DataStructures-lib
#    Triangle-lib
#    ${VTK_LIBRARIES} ${MATHGEO_LIB} ${TINYXML2_LIB}
#    -lortools
#)
#target_include_directories(${PROJECT_NAME} PRIVATE
#  ${CMAKE_CURRENT_BINARY_DIR}
#  ${CMAKE_CURRENT_SOURCE_DIR}
#  ${RAPIDJSON_H}
#  ${TINYXML2_H}
#  ${MATHGEOLIB_H}
#  ${EIGEN_H}
#  ${CMAKE_SOURCE_DIR}/..
#  ${MAINFOLDER}/include/
#  ${MAINFOLDER}/include/Styles
#  ${ANNOTATION_H}
#  ${DEFORMATION_H}
#  ${DATA_STRUCTURES_H}
#  ${IMATISTLEX_H}/
#  ${IMATISTL_H}/ImatiSTL/
#  ${IMATISTL_H}/Kernel/
#  ${IMATISTL_H}/TMesh/
#  ${NANOFLANN}/include/
#  ${NANOFLANN}/examples/
#  ${ORTOOLS_H}/
#)

